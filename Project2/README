Group Members:
Andrew Helgeson
	x500: Helge206
	ID#: 4013171
Kevin Mehlhaff
	x500: mehlh014
	ID#: 3876070
Dylan Bettermann
	x500: bett0159
	ID#: 3966450
	
Documentation and Test Report:
	Documentation is in the docs folder. There is a pdf here generated by Doxygen but the preferred viewing method is through html with is within the Doxygen documentation directory.
	
	Our writeup of the test results is also in the docs folder as a pdf file.
	
How to run:
	Build - 'make' or 'make all'
	Clean - 'make clean'
	Run - 'make run_%' where % is a test number
		- The tests are stored under ./bin/test_configs/ . For example, within this directory is the T1 test directory. To run this test you would use 'make run_T1'
		- Note: Your test's makefile should be named Make% (ie MakeT1) in order for this to work. More is explained in the README.testing file.
		
		- Alternatively, to run all the tests execute 'make run_all'. This will execute a python script that runs through the test directory and executes all tests. This same script will try to start the graph generator to produce the graphs for the given test.
		
		- 'make graph_%' where % is a test number will invoke the graph generator on the folder name % in the test_results directory
		- If you aren't running a test (ours or yours), look below at the command line parameters on the options
		
How to create tests:
	Look to the README.testing file
	
		
Command Line Parameters:
	-s [.ini files]+
		- The settings files are loaded in order. Identical settings in later files will overwrite previous ones.
		
	-t [trace files]+
		- This is a list of trace files to execute. These are loaded in-order before any specified in the settings file/s.
		- If your trace files use decimal addresses then this should be specified in the ini file or as an override as discussed below
			- Check the setting MMU:addr_type in settings.ini for the valid settings (hex or decimal)
		
	Overriding Settings (shortcut to using multiple ini files)
		Section:Option:new_value
		
	Example program execution using default settings (cwd = bin)
	./main -s settings.ini -t traces/main.trace MMU:addr_type:decimal
		-This will execute main with the settings in settings.ini (default ones) and main.trace should have base 10 addrress values
		- If you are changing a lot of settings and running more than 2 trace files it may be easier to write full test or at least a separate ini file. See README.testing
		

Test Outputs:
	All tests (make run_all) output their results to a directory with the same name but stored under bin/test_results/<testname>/
		

Note on Python Scripts:
	The python script for 'make run_all' is stored in the scripts directory and it expects the python interpreter to be located at /usr/bin/python. This script was tested using python 2.7 but it should work back to 2.5.
	
	The run_all script does not have any dependencies beyond a python interpreter but the graph generation script does. To generate graphs using makeGraphs.py and its associated packages will require the following packages.
	
	Numpy:
		On Debian/Ubuntu you can get this using 'apt-get install python-numpy'
		
	Matplotlib:
		Using apt again 'apt-get install python-matplotlib'
		
	This is not required for our project to work correctly, only so that the automated graph generation works correctly. We could have compiled this script but the project would become platform dependent and the smallest executable we could make was ~15MB.
		
