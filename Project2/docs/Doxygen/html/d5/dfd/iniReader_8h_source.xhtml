<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>5103 Project 2: include/iniReader.h Source File</title>

<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />

<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">5103 Project 2
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">include/iniReader.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d5/dfd/iniReader_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#ifndef INIREADER_H_INCLUDED</span>
<a name="l00002"></a>00002 <span class="preprocessor"></span><span class="preprocessor">#define INIREADER_H_INCLUDED</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="keyword">using namespace </span>std;
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="comment">/* Forward Declarations */</span>
<a name="l00017"></a>00017 <span class="keyword">struct </span><a class="code" href="../../dc/dfa/structKeyRecord.xhtml" title="Struct for holding a single settings key and its value.">KeyRecord</a>;
<a name="l00018"></a>00018 <span class="keyword">class </span><a class="code" href="../../d5/de4/classINIReader.xhtml" title="Class for parsing and storing contents of .ini files.">INIReader</a>;
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="keyword">typedef</span> map&lt;string,KeyRecord&gt; KeyMap;
<a name="l00021"></a>00021 <span class="keyword">typedef</span> map&lt;string,KeyMap&gt; SectionMap;
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="keyword">typedef</span> map&lt;string,string&gt; DefaultKeyMap;
<a name="l00024"></a>00024 <span class="keyword">typedef</span> map&lt;string,DefaultKeyMap&gt; DefaultMap;
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#define STR(x) #x</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define EXTRACT(type,sec,opt) settings.extractValue&lt;type&gt;(STR(sec),STR(opt))</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define EXTRACTP(type,sec,opt) settings-&gt;extractValue&lt;type&gt;(STR(sec),STR(opt))</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#define EXTRACT_(obj,type,sec,opt) settings.extractValue&lt;type&gt;(STR(sec),STR(opt))</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span><span class="preprocessor">#define EXTRACTP_(obj,type,sec,opt) settings-&gt;extractValue&lt;type&gt;(STR(sec),STR(opt))</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span>
<a name="l00033"></a><a class="code" href="../../dc/dfa/structKeyRecord.xhtml">00033</a> <span class="keyword">struct </span><a class="code" href="../../dc/dfa/structKeyRecord.xhtml" title="Struct for holding a single settings key and its value.">KeyRecord</a> {
<a name="l00034"></a>00034     <span class="keyword">protected</span>:
<a name="l00035"></a>00035         <span class="keywordtype">string</span> value;
<a name="l00036"></a>00036         <span class="keywordtype">string</span> comment;
<a name="l00037"></a>00037 
<a name="l00038"></a>00038         <span class="keywordtype">int</span> PosPtr;
<a name="l00039"></a>00039 
<a name="l00040"></a>00040     <span class="keyword">public</span>:
<a name="l00041"></a>00041         <span class="comment">/* Initializers */</span>
<a name="l00042"></a>00042         <a class="code" href="../../dc/dfa/structKeyRecord.xhtml" title="Struct for holding a single settings key and its value.">KeyRecord</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> value);
<a name="l00043"></a>00043         <a class="code" href="../../dc/dfa/structKeyRecord.xhtml" title="Struct for holding a single settings key and its value.">KeyRecord</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>, <span class="keyword">const</span> <span class="keywordtype">string</span>,<span class="keywordtype">int</span>);
<a name="l00044"></a>00044 
<a name="l00045"></a>00045         <span class="comment">/* Setters */</span>
<a name="l00046"></a>00046         <span class="keywordtype">void</span> setValue(<span class="keyword">const</span> <span class="keywordtype">string</span>);
<a name="l00047"></a>00047         <span class="keywordtype">void</span> setComment(<span class="keywordtype">string</span>);
<a name="l00048"></a>00048         <span class="keywordtype">void</span> setPosPtr(<span class="keywordtype">int</span>);
<a name="l00049"></a>00049 
<a name="l00050"></a>00050         <span class="comment">/* Getters */</span>
<a name="l00051"></a>00051         <span class="keywordtype">string</span>&amp; getValue();
<a name="l00052"></a>00052         <span class="keywordtype">string</span>&amp; getComment();
<a name="l00053"></a>00053         <span class="keywordtype">int</span> getPosPtr();
<a name="l00054"></a>00054 
<a name="l00055"></a>00055         <span class="keywordtype">string</span> operator() (<span class="keyword">const</span> <a class="code" href="../../dc/dfa/structKeyRecord.xhtml" title="Struct for holding a single settings key and its value.">KeyRecord</a>&amp; record) {
<a name="l00056"></a>00056             <span class="keywordflow">return</span> value;
<a name="l00057"></a>00057         }
<a name="l00058"></a>00058 };
<a name="l00059"></a>00059 
<a name="l00067"></a><a class="code" href="../../d5/de4/classINIReader.xhtml">00067</a> <span class="keyword">class </span><a class="code" href="../../d5/de4/classINIReader.xhtml" title="Class for parsing and storing contents of .ini files.">INIReader</a> {
<a name="l00068"></a>00068     <span class="keyword">protected</span>:
<a name="l00069"></a>00069         fstream ini_file;
<a name="l00070"></a>00070 
<a name="l00071"></a>00071         <span class="keywordtype">int</span> get_pointer;    <span class="comment">//Stream pointer to current get line</span>
<a name="l00072"></a>00072         <span class="keywordtype">int</span> put_pointer;    <span class="comment">//Stream pointer to current put line</span>
<a name="l00073"></a>00073         <span class="keywordtype">int</span> lineNumber;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075         <span class="keywordtype">bool</span> overwriteMode;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077         <span class="keywordtype">string</span> ini_name;
<a name="l00078"></a>00078         <span class="keywordtype">string</span> currLine;   <span class="comment">//Current line being read/parsed</span>
<a name="l00079"></a>00079         <span class="keywordtype">string</span> currSection;     <span class="comment">//Current section being parsed</span>
<a name="l00080"></a>00080         <span class="keywordtype">string</span> currKey;         <span class="comment">//Current key being parsed</span>
<a name="l00081"></a>00081         <span class="keywordtype">string</span> defaultSection;
<a name="l00082"></a>00082 
<a name="l00083"></a>00083         SectionMap section_map;
<a name="l00084"></a>00084         SectionMap::iterator sec_it;
<a name="l00085"></a>00085         KeyMap::iterator key_it;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087         KeyMap* temp_map;
<a name="l00088"></a>00088 
<a name="l00089"></a>00089         DefaultMap default_map;
<a name="l00090"></a>00090         DefaultMap::iterator def_sec_it;
<a name="l00091"></a>00091         DefaultKeyMap::iterator def_key_it;
<a name="l00092"></a>00092 
<a name="l00093"></a>00093         DefaultKeyMap *def_temp_map;
<a name="l00094"></a>00094 
<a name="l00095"></a>00095         <span class="comment">//These sections do not allow settings to be overwritten</span>
<a name="l00096"></a>00096         vector&lt;string&gt; noOverwriteSection;
<a name="l00097"></a>00097 
<a name="l00098"></a>00098         <span class="comment">//Loads the sections and (key,value) pairs from the ini file</span>
<a name="l00099"></a>00099         <span class="keywordtype">void</span> parse_ini();
<a name="l00100"></a>00100 
<a name="l00101"></a>00101         <span class="keywordtype">int</span> addSection(<span class="keywordtype">char</span>* line, <span class="keywordtype">bool</span> modCurrSection = <span class="keyword">true</span>);
<a name="l00102"></a>00102         <span class="keywordtype">int</span> addSection(<span class="keywordtype">string</span>&amp; line, <span class="keywordtype">bool</span> modCurrSection = <span class="keyword">true</span>, <span class="keywordtype">bool</span> ignoreRules = <span class="keyword">false</span>); <span class="comment">//-1 = error with header   0 = Fine   1 = Already exists</span>
<a name="l00103"></a>00103 
<a name="l00104"></a>00104         <span class="keywordtype">int</span> addKey(<span class="keywordtype">string</span>&amp; line);
<a name="l00105"></a>00105         <span class="keywordtype">int</span> addKey(<span class="keywordtype">string</span>&amp; line, <span class="keywordtype">string</span>&amp; section);
<a name="l00106"></a>00106 
<a name="l00107"></a>00107         <span class="keywordtype">string</span>&amp; getKeyValue(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; section, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; key);
<a name="l00108"></a>00108         <span class="keywordtype">string</span>&amp; getKeyComment(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; section, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; key);
<a name="l00109"></a>00109         <span class="keywordtype">string</span>&amp; getDefault(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; section, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; key);
<a name="l00110"></a>00110         <span class="keyword">static</span> <span class="keywordtype">void</span> strip_white_space(<span class="keywordtype">string</span>&amp; str, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; TrimChars = <span class="stringliteral">&quot; \t\n\r&quot;</span>, <span class="keywordtype">int</span> TrimDir = 0);
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     <span class="keyword">public</span>:
<a name="l00113"></a>00113         <a class="code" href="../../d5/de4/classINIReader.xhtml" title="Class for parsing and storing contents of .ini files.">INIReader</a>(<span class="comment">/*Uint8 flags = 0x0000*/</span>);
<a name="l00114"></a>00114         <a class="code" href="../../d5/de4/classINIReader.xhtml" title="Class for parsing and storing contents of .ini files.">INIReader</a>(<span class="keywordtype">string</span> filename <span class="comment">/*, Uint8 flags = 0x0000 */</span>);
<a name="l00115"></a>00115         <span class="keywordtype">bool</span> load_ini(<span class="keywordtype">string</span> filename, <span class="keywordtype">bool</span> auto_parse = <span class="keyword">true</span>, <span class="keywordtype">bool</span> overwrite = <span class="keyword">true</span>);
<a name="l00116"></a>00116         <span class="keywordtype">bool</span> loaded(); <span class="comment">//True = there is a .ini loaded   False = none is loaded or there was an error loading one</span>
<a name="l00117"></a>00117         <span class="keywordtype">bool</span> exists(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; section, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; key);
<a name="l00118"></a>00118 
<a name="l00119"></a>00119         <span class="comment">/* Manipulators */</span>
<a name="l00120"></a>00120         <span class="keywordtype">void</span> addDefault(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; section, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; key, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; value);
<a name="l00121"></a>00121 
<a name="l00122"></a>00122         <span class="keywordtype">void</span> addOverwriteException(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; section);
<a name="l00123"></a>00123 
<a name="l00124"></a>00124         <span class="comment">//Returns true if the value was overriden. False if it doesn&#39;t exist.</span>
<a name="l00125"></a>00125         <span class="keywordtype">bool</span> overWriteOp(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; section, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; key, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; value);
<a name="l00126"></a>00126         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; T extractValue(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; section, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; key);
<a name="l00127"></a>00127 
<a name="l00128"></a>00128         <span class="keywordtype">string</span> extractComment(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; section, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; key);
<a name="l00129"></a>00129 };
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00132"></a>00132 T INIReader::extractValue(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; section, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; key) {
<a name="l00133"></a>00133     stringstream stream;
<a name="l00134"></a>00134     stream &lt;&lt; getKeyValue(section, key);
<a name="l00135"></a>00135 
<a name="l00136"></a>00136     T out;
<a name="l00137"></a>00137     stream &gt;&gt; out;
<a name="l00138"></a>00138 
<a name="l00139"></a>00139     <span class="keywordflow">return</span> out;
<a name="l00140"></a>00140 }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 <span class="comment">/* Without the attribute the compiler thinks it is unused because it depends</span>
<a name="l00143"></a>00143 <span class="comment"> * on the templated function findInVector being used with string&amp; types.</span>
<a name="l00144"></a>00144 <span class="comment"> */</span>
<a name="l00145"></a>00145 __attribute__((unused)) static <span class="keywordtype">bool</span> strEq(const <span class="keywordtype">string</span>&amp; s1, const <span class="keywordtype">string</span>&amp; s2) {
<a name="l00146"></a>00146     <span class="keywordflow">if</span> ( s1.compare(s2) == 0 ) <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00147"></a>00147 
<a name="l00148"></a>00148     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00149"></a>00149 }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 <span class="comment">//Find item in vector using comp_fn for comparison. Only returns true/false, not location</span>
<a name="l00152"></a>00152 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00153"></a>00153 <span class="keywordtype">bool</span> findInVector(vector&lt;T&gt;&amp; vec, <span class="keyword">const</span> T&amp; item, <span class="keywordtype">bool</span> (*comp_fn) (<span class="keyword">const</span> T&amp;,<span class="keyword">const</span> T&amp;)) {
<a name="l00154"></a>00154     <span class="keyword">typename</span> std::vector&lt;T&gt;::iterator it;
<a name="l00155"></a>00155 
<a name="l00156"></a>00156     <span class="keywordflow">for</span> ( it = vec.begin(); it != vec.end(); ++it ) {
<a name="l00157"></a>00157         <span class="keywordflow">if</span> ( comp_fn(*it, item) ) <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00158"></a>00158     }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00161"></a>00161 }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 <span class="preprocessor">#endif // INIREADER_H_INCLUDED</span>
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerator</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Tue Mar 27 2012 23:10:55 for 5103 Project 2 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
