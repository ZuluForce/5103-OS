#ifndef CLOCK_DEVICE_H_INCLUDED
#define CLOCK_DEVICE_H_INCLUDED

/** @file */

#include <errno.h>
#include <cstring>
#include <string>

#include "devices/abstract_device.h"

#define CLOCKID CLOCK_REALTIME

#ifndef CLOCKSIG //Allows kernel to define its own signal for the clock
#define CLOCKSIG SIGRTMIN
#endif

using namespace std;

class ClockDevice: public AbstractDevice {
	private:
		/// @cond
		timer_t timerid;
		struct sigevent sev;
		struct itimerspec iTime, iDisarm, iProbe;
		/// @endcond

	public:
		ClockDevice();
		~ClockDevice();

		/** Set the timer to go off.
		 *
		 *	Sets timer to send signal #CLOCKSIG in
		 *	usec microseconds.
		 *
		 *	\param usec
		 *	Time in microseconds.
		 *
		 *	\exception std::string error message
		 */
		void setTimer(int usec);

		/** Disarm the timer.
		 *
		 *	Tries to disarm the timer.
		 *
		 *	\exception std::string error message
		 */
		void disarm();

		/** Get how much time is remaining.
		 *
		 *	Returns the remaining time until a signal
		 * 	is produced.
		 *
		 * \return int Time left in microseconds
		 */
		int getTime();
};

/** \def CLOCKSIG
 *	Signal generated by ClockDevice
 */

#endif // CLOCK_DEVICE_H_INCLUDED
