Group Members:
Andrew Helgeson
	x500: Helge206
	ID#: 4013171
Kevin Mehlhaff
	x500: mehlh014
	ID#: 3876070
Dylan Bettermann
	x500: bett0159
	ID#: 3966450
	
How to run:
	$ make
		- Creates all object files for the file system
		
	$ make all_apps
		- Compiles and links all the user space utilities
		
	$ make clean_all
		- Cleans all object and executable files
	
	$ make test_all
		- Runs all the filesystem tests using the python testing harness
		
		
Completed Extra-Credits:
	Fsck with error correction
		- FSCK first makes sure that the inodes referenced by directory entries have the correct number of Nlinks. It next
		determines if the physical block allocation of the filesystem is correct. It checks that all the blocks mentioned
		in the inodes are marked as allocated blocks and that all blocks not metnioned in the inodes are marked as free blocks.
		After each step in the process, the user is prompted to determine whether to automatically fix the errors.
		- The "-silent" option runs FSCK without prompts and automatically fixes errors.
		- In order to "corrupt" the filesystem, a new utility, crpt, was created. Usage of crpt is as follows:
		usage: crpt <num_inodes> <num_blocks>
		Where num_nodes is the number of inodes to corrupt. It corrupts (num_inodes/2) IndexNodes by decrementing their Nlinks
		and corrupts the remaining (num_inodes - num_inodes/2) IndexNodes by deleting a DirectoryEntry to each of them.
		Num_blocks is the number of physical blocks to manupulate. It allocates num_blocks/2 blocks without assigning them to
		a particular IndexNode and then deallocates (num_blocks - num_blocks/2) blocks that are in use by IndexNodes.

	Find utility
		- Find takes any number of space-separated pathnames or filenames and recursively scans the file system from each o
		those points in a manner similar to Unix find (depth first search). It prints out in order each file or directory it finds.
	
	Symbolic links
		- Symbolic links are created with a new kernel function called symlink with an identical interface to the
		original Kernel::link method. A new type S_IFSYM was created for symlinks. If this inode type is
		encountered while traversing inodes it is dereferenced recursively. An additional parameter (given a default
		value) was added to findIndexNode to allow symlinks on the end of a path to not be dereferenced. This is
		useful for the user space utility ls so that it can dispay the symlink rather than the item it points to.

		- A new option -r was added to ls which will dereference any symbolic links.
		- To create symbolic links using ln, add the -s parameter after the two paths


Python Testing Harness:
	Look at src/tests/README for information on this script and how to make your own tests.

	The only dependency to use this script is a python interpreter version 2.6+ and it should
	be located in /usr/bin/python.
